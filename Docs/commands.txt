Para generar el lexer y parser (donde Panico.g4 es el archivo con la gramatica):
- entrar al directorio ./Panico y ejecutar:
antlr4 -Dlanguage=Cpp -visitor -o generated/ Panico.g4

Compilar main.cpp (accedemos al dir donde se encuentra main.cpp):
- compilamos con g++ y le damos la version c++17
- incluimos los header files del runtime de antlr4
- linkeamos los archivos lib del runtime de antlr4
- linkeamos el programa a la biblioteca de antlr4 runtime
- incluimos el folder de include
- le damos nombre al output file
- source file main.cpp y los generados por antlr y los creados en src.
g++ -std=c++17 \
    -I /opt/homebrew/opt/antlr4-cpp-runtime/include/antlr4-runtime \
    -L /opt/homebrew/opt/antlr4-cpp-runtime/lib \
    -l antlr4-runtime \
    -I include \
    -o ../Output/PanicoCompiler main.cpp generated/*.cpp src/*.cpp 

ó desde el root dir:
g++ -std=c++17 \
    -I /opt/homebrew/opt/antlr4-cpp-runtime/include/antlr4-runtime \
    -L /opt/homebrew/opt/antlr4-cpp-runtime/lib \
    -l antlr4-runtime \
    -I ./Panico/include \
    -o ./Output/PanicoCompiler ./Panico/main.cpp ./Panico/generated/*.cpp ./Panico/src/*.cpp 

Correr main.cpp (PanicoCompiler en el Panico dir):
./output/PanicoCompiler path/to/your/input.panico
I.E:
./output/PanicoCompiler ../Samples/simple.panico

ó desde el root dir:
./Output/PanicoCompiler ./Samples/simple.paico

Compilar y correr main.cpp (en Panico dir):
g++ -std=c++17 \
    -I /opt/homebrew/opt/antlr4-cpp-runtime/include/antlr4-runtime \
    -L /opt/homebrew/opt/antlr4-cpp-runtime/lib \
    -l antlr4-runtime \
    -I include \
    -o ./output/PanicoCompiler main.cpp generated/*.cpp src/*.cpp \
    && ./output/PanicoCompiler ../Samples/simple.panico

Despues de compilado y correr un archivo .panico contra el compilador, el output del archivo .obj se guardará en el dir ./Output.
Este archivo podremos ejecutarlo contra la virtual machine con el siguiente comando (desde el root dir y con python3):
python3 ./VirtualMachine/virtualMachine.py Output/<nombre de arvchivo>.obj